#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification automatique de l\'accessibilit√© RGAA...\n');

// Fonction pour ex√©cuter une commande et afficher le r√©sultat
function runCommand(command, description) {
  console.log(`üìã ${description}...`);
  try {
    const output = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`‚úÖ ${description} - OK\n`);
    return true;
  } catch (error) {
    console.log(`‚ùå ${description} - ERREUR:`);
    console.log(error.stdout || error.message);
    console.log('');
    return false;
  }
}

// Fonction pour v√©rifier les fichiers
function checkFiles() {
  console.log('üìÅ V√©rification des fichiers d\'accessibilit√©...');
  
  const requiredFiles = [
    'components/accessibility/FocusManager.tsx',
    'components/accessibility/ScreenReaderAnnouncement.tsx',
    'components/accessibility/AutoAccessibleForm.tsx',
    'hooks/useAccessibility.ts',
    'ACCESSIBILITY.md'
  ];
  
  let allFilesExist = true;
  
  requiredFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`‚úÖ ${file} - Pr√©sent`);
    } else {
      console.log(`‚ùå ${file} - Manquant`);
      allFilesExist = false;
    }
  });
  
  console.log('');
  return allFilesExist;
}

// Fonction pour v√©rifier les imports d'accessibilit√©
function checkImports() {
  console.log('üîó V√©rification des imports d\'accessibilit√©...');
  
  const filesToCheck = [
    'app/layout.tsx',
    'app/page.tsx',
    'components/layout/Navbar.tsx'
  ];
  
  let allImportsCorrect = true;
  
  filesToCheck.forEach(file => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      
      // V√©rifications basiques
      if (file.includes('layout.tsx') && !content.includes('suppressHydrationWarning')) {
        console.log(`‚ùå ${file} - suppressHydrationWarning manquant`);
        allImportsCorrect = false;
      }
      
      if (file.includes('page.tsx') && !content.includes('role="main"')) {
        console.log(`‚ùå ${file} - role="main" manquant`);
        allImportsCorrect = false;
      }
      
      if (file.includes('Navbar.tsx') && !content.includes('aria-label')) {
        console.log(`‚ùå ${file} - aria-label manquant`);
        allImportsCorrect = false;
      }
      
      if (allImportsCorrect) {
        console.log(`‚úÖ ${file} - Imports corrects`);
      }
    }
  });
  
  console.log('');
  return allImportsCorrect;
}

// Fonction principale
function main() {
  let allChecksPassed = true;
  
  // V√©rification des fichiers
  if (!checkFiles()) {
    allChecksPassed = false;
  }
  
  // V√©rification des imports
  if (!checkImports()) {
    allChecksPassed = false;
  }
  
  // V√©rification ESLint (si disponible)
  if (fs.existsSync('node_modules/.bin/eslint')) {
    if (!runCommand('npx eslint . --ext .ts,.tsx --config .eslintrc.accessibility.js', 'V√©rification ESLint accessibilit√©')) {
      allChecksPassed = false;
    }
  } else {
    console.log('‚ö†Ô∏è  ESLint non install√© - Installation recommand√©e pour l\'accessibilit√©\n');
  }
  
  // V√©rification TypeScript
  if (fs.existsSync('tsconfig.json')) {
    if (!runCommand('npx tsc --noEmit', 'V√©rification TypeScript')) {
      allChecksPassed = false;
    }
  }
  
  // R√©sum√©
  console.log('üìä R√âSUM√â DE LA V√âRIFICATION RGAA:');
  console.log('=====================================');
  
  if (allChecksPassed) {
    console.log('üéâ Toutes les v√©rifications d\'accessibilit√© sont pass√©es !');
    console.log('‚úÖ Votre projet est conforme aux standards RGAA');
  } else {
    console.log('‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©');
    console.log('üìñ Consultez ACCESSIBILITY.md pour plus d\'informations');
    process.exit(1);
  }
}

// Ex√©cution
main();
